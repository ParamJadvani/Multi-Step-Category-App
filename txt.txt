/components/dynamic-forms/DynamicForm.tsx
"use client";

import React from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { Page } from "@/data";
import { slugify } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import RadioGroupField from "@/components/dynamic-forms/fields/RadioGroupField";
import SelectField from "@/components/dynamic-forms/fields/SelectField";

import InputField from "@/components/dynamic-forms/fields/InputField";
import CheckboxField from "@/components/dynamic-forms/fields/CheckBoxField";

// Define a generic FormData type based on the fields
type FormData = {
    [key: string]: string | number | boolean | undefined;
};

interface DynamicFormProps {
    pageData: Page;
}

export default function DynamicForm({ pageData }: DynamicFormProps) {
    const { register, handleSubmit, control } = useForm<FormData>({
        defaultValues: pageData.fields.reduce((acc, field) => {
            const key = slugify(field.name);
            acc[key] = field.type === "checkbox" ? false : undefined;
            return acc;
        }, {} as FormData),
    });

    const onSubmit: SubmitHandler<FormData> = (data) => {
        console.log("Form Data:", data);
    };

    return (
        <form
            onSubmit={handleSubmit(onSubmit)}
            className="space-y-6 p-4 md:p-6 lg:p-8 max-w-2xl mx-auto"
        >
            <h2 className="text-2xl font-semibold mb-6">{pageData.name}</h2>
            {pageData.fields.map((field) => {
                const fieldName = slugify(field.name);

                switch (field.type) {
                    case "radio":
                        return (
                            <RadioGroupField
                                key={fieldName}
                                fieldConfig={field}
                                control={control}
                                fieldName={fieldName}
                            />
                        );
                    case "select":
                        return (
                            <SelectField
                                key={fieldName}
                                fieldConfig={field}
                                control={control}
                                fieldName={fieldName}
                            />
                        );
                    case "checkbox":
                        return (
                            <CheckboxField
                                key={fieldName}
                                fieldConfig={field}
                                register={register}
                                fieldName={fieldName}
                            />
                        );
                    case "textarea":
                    case "text":
                    case "email":
                    case "password":
                    case "number":
                    case "tel":
                    default:
                        return (
                            <InputField
                                key={fieldName}
                                fieldConfig={field}
                                register={register}
                                fieldName={fieldName}
                            />
                        );
                }
            })}
            <Button type="submit">Submit</Button>
        </form>
    );
}

// components/dynamic-form/fields/InputField.tsx
import React from "react";
import { UseFormRegister } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Field } from "@/data";

// Define FormData type
type FormData = {
    [key: string]: string | number | boolean | undefined;
};

interface InputFieldProps {
    fieldConfig: Field;
    register: UseFormRegister<FormData>;
    fieldName: keyof FormData;
}

export default function InputField({ fieldConfig, register, fieldName }: InputFieldProps) {
    const inputType = ["text", "email", "password", "number", "tel"].includes(fieldConfig.type)
        ? fieldConfig.type
        : "text";

    return (
        <div className="mb-4">
            <Label htmlFor={fieldName as string}>{fieldConfig.name}</Label>
            {fieldConfig.type === "textarea" ? (
                <Textarea
                    id={fieldName as string}
                    {...register(fieldName as string)}
                    placeholder={fieldConfig.placeholder}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                />
            ) : (
                <Input
                    id={fieldName as string}
                    type={inputType}
                    {...register(fieldName as string, {
                        valueAsNumber: fieldConfig.type === "number",
                    })}
                    placeholder={fieldConfig.placeholder}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                />
            )}
        </div>
    );
}

// components/dynamic-form/fields/RadioGroupField.tsx
import React from "react";
import { Control, Controller } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Field } from "@/data";

// Define FormData type
type FormData = {
    [key: string]: string | number | boolean | undefined;
};

interface RadioGroupFieldProps {
    fieldConfig: Field;
    control: Control<FormData>;
    fieldName: keyof FormData;
}

export default function RadioGroupField({ fieldConfig, control, fieldName }: RadioGroupFieldProps) {
    return (
        <div className="mb-4">
            <Label className="mb-2 block">{fieldConfig.name}</Label>
            <Controller
                name={fieldName as string}
                control={control}
                render={({ field }) => (
                    <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value as string}
                        className="flex flex-col space-y-1"
                    >
                        {(fieldConfig.options ?? []).map((option) => (
                            <div key={option} className="flex items-center space-x-3 space-y-0">
                                <RadioGroupItem value={option} id={`${fieldName}-${option}`} />
                                <Label htmlFor={`${fieldName}-${option}`}>{option}</Label>
                            </div>
                        ))}
                    </RadioGroup>
                )}
            />
        </div>
    );
}

// components/dynamic-form/fields/SelectField.tsx
import React from "react";
import { Control, Controller } from "react-hook-form";
import { Label } from "@/components/ui/label";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Field } from "@/data";

// Define FormData type
type FormData = {
    [key: string]: string | number | boolean | undefined;
};

interface SelectFieldProps {
    fieldConfig: Field;
    control: Control<FormData>;
    fieldName: keyof FormData;
}

export default function SelectField({ fieldConfig, control, fieldName }: SelectFieldProps) {
    return (
        <div className="mb-4">
            <Label htmlFor={fieldName as string}>{fieldConfig.name}</Label>
            <Controller
                name={fieldName as string}
                control={control}
                render={({ field }) => (
                    <Select onValueChange={field.onChange} defaultValue={field.value as string}>
                        <SelectTrigger id={fieldName as string} className="w-full mt-1">
                            <SelectValue
                                placeholder={fieldConfig.placeholder || "Select an option"}
                            />
                        </SelectTrigger>
                        <SelectContent>
                            {(fieldConfig.options ?? []).map((option) => (
                                <SelectItem key={option} value={option}>
                                    {option}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                )}
            />
        </div>
    );
}

// components/dynamic-form/fields/CheckboxField.tsx
import React from "react";
import { UseFormRegister } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Field } from "@/data";

// Define FormData type
type FormData = {
    [key: string]: string | number | boolean | undefined;
};

interface CheckboxFieldProps {
    fieldConfig: Field;
    register: UseFormRegister<FormData>;
    fieldName: keyof FormData;
}

export default function CheckboxField({ fieldConfig, register, fieldName }: CheckboxFieldProps) {
    return (
        <div className="mb-4 items-top flex space-x-2">
            <Checkbox id={fieldName as string} {...register(fieldName as string)} />
            <div className="grid gap-1.5 leading-none">
                <Label htmlFor={fieldName as string} className="font-medium">
                    {fieldConfig.name}
                </Label>
                {fieldConfig.placeholder && (
                    <p className="text-sm text-muted-foreground">{fieldConfig.placeholder}</p>
                )}
            </div>
        </div>
    );
}

/data/index.ts
// data/index.ts

export type FieldType =
    | "text"
    | "email"
    | "password"
    | "number"
    | "tel"
    | "radio"
    | "select"
    | "checkbox"
    | "textarea";

export type Field = {
    name: string;
    type: FieldType;
    required: boolean;
    options?: string[];
    placeholder?: string;
};

export type Page = {
    name: string;
    value: string;
    fields: Field[];
};

export type Category = {
    name: string;
    value: string;
    protected: boolean;
    pages: Page[];
};

const categories: Category[] = [
    {
        name: "User Registration",
        value: "user-registration",
        protected: false,
        pages: [
            {
                name: "Account Info",
                value: "account-info",
                fields: [
                    {
                        name: "Full Name",
                        type: "text",
                        required: true,
                        placeholder: "Enter your full name",
                    },
                    {
                        name: "Email",
                        type: "email",
                        required: true,
                        placeholder: "you@example.com",
                    },
                    { name: "Password", type: "password", required: true },
                    { name: "Confirm Password", type: "password", required: true },
                ],
            },
            {
                name: "Profile Details",
                value: "profile-details",
                fields: [
                    {
                        name: "Username",
                        type: "text",
                        required: true,
                        placeholder: "Choose a username",
                    },
                    {
                        name: "Phone Number",
                        type: "tel",
                        required: false,
                        placeholder: "Optional phone number",
                    },
                    { name: "Country", type: "text", required: false },
                    { name: "City", type: "text", required: false },
                ],
            },
            {
                name: "Preferences",
                value: "preferences",
                fields: [
                    {
                        name: "Preferred Language",
                        type: "select",
                        required: false,
                        options: ["English", "Spanish", "French", "German"],
                    },
                    {
                        name: "Communication Method",
                        type: "radio",
                        required: true,
                        options: ["Email", "SMS", "Phone Call"],
                    },
                    { name: "Subscribe to Newsletter", type: "checkbox", required: false },
                ],
            },
        ],
    },
    {
        name: "Job Application",
        value: "job-application",
        protected: true,
        pages: [
            {
                name: "Personal Info",
                value: "personal-info",
                fields: [
                    { name: "First Name", type: "text", required: true },
                    { name: "Last Name", type: "text", required: true },
                    {
                        name: "Applicant Email",
                        type: "email",
                        required: true,
                        placeholder: "applicant@email.com",
                    },
                    { name: "Contact Phone", type: "tel", required: true },
                ],
            },
            {
                name: "Education History",
                value: "education-history",
                fields: [
                    {
                        name: "Highest Degree Achieved",
                        type: "select",
                        required: true,
                        options: [
                            "High School",
                            "Associate's",
                            "Bachelor's",
                            "Master's",
                            "Doctorate",
                        ],
                    },
                    {
                        name: "Field of Study",
                        type: "text",
                        required: true,
                        placeholder: "e.g., Computer Science",
                    },
                    { name: "University Name", type: "text", required: false },
                    {
                        name: "Graduation Year",
                        type: "number",
                        required: false,
                        placeholder: "YYYY",
                    },
                ],
            },
            {
                name: "Work Experience",
                value: "work-experience",
                fields: [
                    { name: "Most Recent Company", type: "text", required: false },
                    { name: "Job Title", type: "text", required: false },
                    { name: "Years Worked", type: "number", required: false },
                    {
                        name: "Job Description",
                        type: "textarea",
                        required: false,
                        placeholder: "Briefly describe your responsibilities",
                    },
                ],
            },
            {
                name: "Application Preferences",
                value: "application-preferences",
                fields: [
                    {
                        name: "Desired Salary Range",
                        type: "select",
                        required: false,
                        options: ["$40k-$60k", "$60k-$80k", "$80k-$100k", "$100k+"],
                    },
                    {
                        name: "Willing to Relocate",
                        type: "radio",
                        required: true,
                        options: ["Yes", "No", "Maybe"],
                    },
                    {
                        name: "Remote Work",
                        type: "checkbox",
                        required: false,
                        options: ["Open to remote"],
                    },
                ],
            },
        ],
    },
    {
        name: "Product Feedback",
        value: "product-feedback",
        protected: false,
        pages: [
            {
                name: "Product Usage",
                value: "product-usage",
                fields: [
                    {
                        name: "Product Used",
                        type: "select",
                        required: true,
                        options: ["Product A", "Product B", "Product C"],
                    },
                    {
                        name: "Frequency of Use",
                        type: "radio",
                        required: true,
                        options: ["Daily", "Weekly", "Monthly", "Rarely"],
                    },
                    {
                        name: "Primary Use Case",
                        type: "textarea",
                        required: false,
                        placeholder: "How do you primarily use the product?",
                    },
                ],
            },
            {
                name: "Satisfaction Survey",
                value: "satisfaction-survey",
                fields: [
                    {
                        name: "Overall Satisfaction",
                        type: "radio",
                        required: true,
                        options: [
                            "Very Satisfied",
                            "Satisfied",
                            "Neutral",
                            "Dissatisfied",
                            "Very Dissatisfied",
                        ],
                    },
                    {
                        name: "Likelihood to Recommend",
                        type: "select",
                        required: true,
                        options: [
                            "10 - Extremely Likely",
                            "9",
                            "8",
                            "7",
                            "6",
                            "5",
                            "4",
                            "3",
                            "2",
                            "1 - Not at all Likely",
                        ],
                    },
                    {
                        name: "Feature Request",
                        type: "textarea",
                        required: false,
                        placeholder: "Any features you'd like to see?",
                    },
                ],
            },
        ],
    },
];

export default categories;

/lib/utils.ts
// lib/utils.ts

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import categories, { Category, Page } from "@/data";

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}

export function findCategoryAndPage(
    categoryValue: string,
    pageValue: string
): { category: Category | undefined; page: Page | undefined } {
    const category = categories.find((cat) => cat.value === categoryValue);
    const page = category?.pages.find((p) => p.value === pageValue);
    return { category, page };
}

export function slugify(text: string): string {
    return text
        .toString()
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^\w\-]+/g, "")
        .replace(/\-\-+/g, "-")
        .replace(/^-+/, "")
        .replace(/-+$/, "");
}

/app/dashboard/[...slug]/page.tsx
import { notFound } from "next/navigation";
import { findCategoryAndPage } from "@/lib/utils";
import DynamicForm from "@/components/dynamic-forms/fields/DynamicForm";

export default async function DynamicFormPage({ params }: { params: Promise<{ slug: string[] }> }) {
    const { slug } = await params;

    if (!slug || slug.length !== 2) {
        console.error("Invalid slug:", slug);
        notFound();
    }

    const [categoryValue, pageValue] = slug;
    const { category, page } = findCategoryAndPage(categoryValue, pageValue);

    if (!category || !page) {
        console.error("Category or Page not found for:", categoryValue, pageValue);
        notFound();
    }

    return (
        <div className="container mx-auto py-8">
            <DynamicForm pageData={page} />
        </div>
    );
}
